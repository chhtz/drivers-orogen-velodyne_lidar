name "velodyne_lidar"
# version "0.1"

using_library "velodyne_lidar"
using_library "aggregator"
import_types_from "aggregator"
import_types_from "base"
import_types_from "velodyne_lidar/gps_rmc_type.h"
import_types_from "velodyne_lidar/MultilevelLaserScan.h"
import_types_from "VelodyneLidarTypes.hpp"

## Export deprecated MultilevelLaserScan type
## in order to support backward compatibility.
typekit do
    export_types '/velodyne_lidar/MultilevelLaserScan'
end

task_context "LaserScanner" do
    needs_configuration

    # The HDL-32E and VLP-16 are currently supported
    property "sensor_type", "/velodyne_lidar/VelodyneSensor", :HDL32E

    # The timeout on write. Defaults to one second.
    property "io_write_timeout", "/base/Time"

    # The timeout on read. Defaults to one second.
    property "io_read_timeout", "/base/Time"

    # activate/deactivate the output of remission values
    property('use_remissions', 'bool', false)

    # Only output the latest sample in every call
    property('only_write_newest_sample', 'bool', false)

    # The target size of a full scan in rotation around its axis. Default is 360 degree in rad.
    property('full_scan_size', 'double', 6.28318)

    # laserscans of the upper head
    output_port("laser_scans", "base::samples::DepthMap")

    # laserscans of the lower head. Note: this output is unused at the moment.
    output_port("laser_scans_lower_head", "base::samples::DepthMap")

    periodic 0.05

    runtime_states :PACKET_LOSS
    error_states :IO_ERROR
end

task_context "Positioning" do
    needs_configuration
    fd_driven
    
    property("utm_zone", "int", 32).
        doc "UTM zone for conversion of WGS84 to UTM"
    property("utm_north", "bool", true).
        doc "UTM north for conversion of WGS84 to UTM"
    property("origin", "/base/Position").
        doc "Origin in UTM coordinates, that is used for position readings." 
    property('timeout', 'int', 50).
        doc 'the read timeout in milliseconds'
    
    output_port('gps_raw_data', '/velodyne_lidar/GPS_RMC').
            doc "the GPS raw data as reported by the hardware"

    output_port('position_samples', '/base/samples/RigidBodyState').
            doc "computed position in m, in the UTM coordinate provided and local to the origin"
            
    output_port('orientation_sensors_1', '/base/samples/IMUSensors').
        doc 'provides the first raw set of orientation readings. 1-axis gryrometer and 2-axis accelerometer'
    output_port('orientation_sensors_2', '/base/samples/IMUSensors').
        doc 'provides the second raw set of orientation readings. 1-axis gryrometer and 2-axis accelerometer'
    output_port('orientation_sensors_3', '/base/samples/IMUSensors').
        doc 'provides the third raw set of orientation readings. 1-axis gryrometer and 2-axis accelerometer'

    output_port('dt', 'int').doc 'deltaT since last packet according to internal clock'
    error_states :IO_ERROR, :IO_TIMEOUT
end
